<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>DS Song Player &amp; Downloader</title>
<style>
  /* Default Design Guidelines - Minimal Elegant Light Theme */
  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
  :root {
    --color-background: #ffffff;
    --color-text: #374151;
    --color-text-muted: #6b7280;
    --color-primary: #111827;
    --color-secondary: #2563eb;
    --color-secondary-hover: #1d4ed8;
    --color-card-bg: #f9fafb;
    --color-shadow: rgba(0, 0, 0, 0.05);
    --border-radius: 0.75rem;
    --transition-speed: 0.3s;
  }
  * {
    box-sizing: border-box;
  }
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: var(--color-background);
    color: var(--color-text);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  a {
    color: var(--color-secondary);
    text-decoration: none;
    transition: color var(--transition-speed);
  }
  a:hover,
  a:focus {
    color: var(--color-secondary-hover);
    outline: none;
  }
  header {
    position: sticky;
    top: 0;
    background: var(--color-background);
    border-bottom: 1px solid #e5e7eb;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 1px 2px var(--color-shadow);
    z-index: 10;
  }
  header .logo {
    font-weight: 700;
    font-size: 1.5rem;
    color: var(--color-primary);
    user-select: none;
  }
  main {
    flex-grow: 1;
    max-width: 1200px;
    margin: 2rem auto 4rem;
    width: 95%;
    padding: 0 1rem;
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }
  h1.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    line-height: 1.1;
    max-width: 600px;
    user-select: none;
  }
  p.hero-subtitle {
    font-size: 1.125rem;
    color: var(--color-text-muted);
    max-width: 600px;
    margin-top: 0.25rem;
    user-select: none;
  }
  form.search-form {
    max-width: 600px;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
  }
  form.search-form input[type="text"] {
    flex-grow: 1;
    padding: 0.75rem 1rem;
    font-size: 1rem;
    border: 1px solid #d1d5db;
    border-radius: var(--border-radius);
    transition: border-color var(--transition-speed);
  }
  form.search-form input[type="text"]:focus {
    outline: none;
    border-color: var(--color-secondary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.3);
  }
  .checkbox-group {
    display: flex;
    gap: 2rem;
    user-select: none;
  }
  .checkbox-group label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    font-size: 0.95rem;
  }
  input[type="checkbox"] {
    width: 18px;
    height: 18px;
    cursor: pointer;
  }
  button.search-button {
    background-color: var(--color-secondary);
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    border-radius: var(--border-radius);
    font-size: 1rem;
    cursor: pointer;
    transition: background-color var(--transition-speed);
  }
  button.search-button:hover,
  button.search-button:focus {
    background-color: var(--color-secondary-hover);
    outline: none;
  }
  section.results-section {
    max-width: 900px;
  }
  .song-list {
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax(140px,1fr));
    gap: 1.5rem;
  }
  .song-card {
    background: var(--color-card-bg);
    padding: 1rem;
    border-radius: var(--border-radius);
    box-shadow: 0 4px 6px var(--color-shadow);
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    user-select: none;
  }
  .song-card:hover,
  .song-card:focus {
    outline: none;
    transform: scale(1.05);
    box-shadow: 0 8px 15px var(--color-shadow);
  }
  .song-poster {
    width: 100%;
    max-width: 140px;
    border-radius: var(--border-radius);
    margin-bottom: 0.7rem;
    aspect-ratio: 1/1;
    object-fit: cover;
  }
  .song-title {
    font-weight: 700;
    font-size: 1rem;
    text-align: center;
    color: var(--color-primary);
    margin-bottom: 0.2rem;
  }
  .song-artist {
    font-size: 0.875rem;
    color: var(--color-text-muted);
    text-align: center;
  }
  section.player-section {
    max-width: 700px;
    background: var(--color-card-bg);
    padding: 1.5rem 2rem;
    border-radius: var(--border-radius);
    box-shadow: 0 4px 6px var(--color-shadow);
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .player-info {
    display: flex;
    gap: 1rem;
    align-items: center;
  }
  .player-poster {
    width: 100px;
    height: 100px;
    border-radius: var(--border-radius);
    object-fit: cover;
    flex-shrink: 0;
    box-shadow: 0 2px 6px var(--color-shadow);
  }
  .player-texts {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    flex-grow: 1;
  }
  .player-title {
    font-weight: 700;
    font-size: 1.5rem;
    color: var(--color-primary);
  }
  .player-artist {
    font-size: 1rem;
    color: var(--color-text-muted);
  }
  button.download-button {
    background-color: var(--color-secondary);
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    border-radius: var(--border-radius);
    font-size: 1rem;
    cursor: pointer;
    width: fit-content;
    transition: background-color var(--transition-speed);
    user-select: none;
  }
  button.download-button:hover,
  button.download-button:focus {
    background-color: var(--color-secondary-hover);
    outline: none;
  }
  .info-message {
    font-size: 1rem;
    color: var(--color-text-muted);
    max-width: 600px;
  }
  @media (max-width: 640px) {
    h1.hero-title {
      font-size: 2.5rem;
    }
    .player-info {
      flex-direction: column;
      align-items: flex-start;
    }
    .player-poster {
      width: 100%;
      height: auto;
      aspect-ratio: 1/1;
    }
  }
</style>
</head>
<body>
<header>
  <div class="logo" tabindex="0">DS Song Player &amp; Downloader</div>
</header>
<main>
  <section aria-label="Search Songs">
    <h1 class="hero-title">Find and Play Music Instantly</h1>
    <p class="hero-subtitle">Search by song name, Spotify link or YouTube link. Stream or download your favorite songs easily.</p>
    <form class="search-form" aria-describedby="search-description" id="searchForm">
      <input 
        type="text" 
        id="searchInput" 
        aria-label="Song name or Spotify or YouTube link" 
        placeholder="Enter song name or Spotify/YouTube link" 
        autocomplete="off" 
        required
      />
      <div class="checkbox-group" role="group" aria-label="Search mode">
        <label for="checkboxAccuracy">
          <input type="checkbox" id="checkboxAccuracy" name="searchMode" value="accuracy"/>
          Accuracy
        </label>
        <label for="checkboxMulti">
          <input type="checkbox" id="checkboxMulti" name="searchMode" value="multi"/>
          Multi
        </label>
      </div>
      <button type="submit" class="search-button" aria-label="Search Songs">Search</button>
    </form>
  </section>

  <section aria-label="Search Results" class="results-section" id="resultsSection" hidden></section>

  <section aria-label="Song Player" class="player-section" id="playerSection" hidden>
    <div class="player-info">
      <img src="" alt="Song poster" class="player-poster" id="playerPoster" />
      <div class="player-texts">
        <div class="player-title" id="playerTitle"></div>
        <div class="player-artist" id="playerArtist"></div>
      </div>
    </div>
    <iframe
      id="youtubePlayer"
      width="100%"
      height="190"
      src=""
      frameborder="0"
      allow="autoplay; encrypted-media"
      allowfullscreen
      title="YouTube Player"
    ></iframe>
    <a href="#" id="downloadButton" target="_blank" rel="noopener noreferrer">
      <button class="download-button">Download Song</button>
    </a>
  </section>

  <section aria-live="polite" class="info-message" id="infoMessage" hidden></section>
</main>

<script>
  // CONFIGURATION: Insert your API KEYS here
  const SPOTIFY_CLIENT_ID = '031cec83776147258a0bc6a4a9c258c6'; // INSERT YOUR SPOTIFY CLIENT ID
  const SPOTIFY_CLIENT_SECRET = 'f6faf8eb6e4a48449050732898f48c9a'; // INSERT YOUR SPOTIFY CLIENT SECRET
  const YOUTUBE_API_KEY = 'AIzaSyCf0q5RTWqtev0_9gzdSz-B_sZHqzSYUGg'; // INSERT YOUR YOUTUBE API KEY

  // Global state
  let spotifyAccessToken = '';
  let searchMode = 'accuracy'; // default
  let currentSong = null; 

  // DOM elements
  const searchForm = document.getElementById('searchForm');
  const searchInput = document.getElementById('searchInput');
  const checkboxAccuracy = document.getElementById('checkboxAccuracy');
  const checkboxMulti = document.getElementById('checkboxMulti');
  const resultsSection = document.getElementById('resultsSection');
  const playerSection = document.getElementById('playerSection');
  const playerPoster = document.getElementById('playerPoster');
  const playerTitle = document.getElementById('playerTitle');
  const playerArtist = document.getElementById('playerArtist');
  const youtubePlayer = document.getElementById('youtubePlayer');
  const downloadButton = document.getElementById('downloadButton');
  const infoMessage = document.getElementById('infoMessage');

  // Mutual exclusive checkboxes logic
  checkboxAccuracy.addEventListener('change', () => {
    if (checkboxAccuracy.checked) {
      checkboxMulti.checked = false;
      searchMode = 'accuracy';
    } else if (!checkboxMulti.checked) {
      checkboxAccuracy.checked = true;
      searchMode = 'accuracy';
    }
  });
  checkboxMulti.addEventListener('change', () => {
    if (checkboxMulti.checked) {
      checkboxAccuracy.checked = false;
      searchMode = 'multi';
    } else if (!checkboxAccuracy.checked) {
      checkboxAccuracy.checked = true;
      searchMode = 'accuracy';
    }
  });
  checkboxAccuracy.checked = true;

  // Utility to Base64 encode
  function b64EncodeUnicode(str) {
    return btoa(unescape(encodeURIComponent(str)));
  }

  // Fetch Spotify token with Client Credential flow
  async function fetchSpotifyToken() {
    if (!SPOTIFY_CLIENT_ID || !SPOTIFY_CLIENT_SECRET) {
      showError('Please set your Spotify Client ID and Secret in the script.');
      throw new Error('Spotify API keys missing');
    }
    const authString = b64EncodeUnicode(SPOTIFY_CLIENT_ID + ':' + SPOTIFY_CLIENT_SECRET);
    try {
      const response = await fetch('https://accounts.spotify.com/api/token', {
        method: 'POST',
        headers: {
          'Authorization': 'Basic ' + authString,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'grant_type=client_credentials'
      });
      if (!response.ok) throw new Error('Spotify token request failed');
      const data = await response.json();
      return data.access_token;
    } catch (err) {
      showError('Failed to get Spotify access token. Check your credentials.');
      throw err;
    }
  }

  // Search Spotify
  async function searchSpotifyTracks(query) {
    if (!spotifyAccessToken) {
      spotifyAccessToken = await fetchSpotifyToken();
    }
    try {
      const url = new URL('https://api.spotify.com/v1/search');
      url.searchParams.set('q', query);
      url.searchParams.set('type', 'track');
      url.searchParams.set('limit', '20');
      const response = await fetch(url.toString(), {
        headers: { Authorization: `Bearer ${spotifyAccessToken}` }
      });
      if (response.status === 401) {
        spotifyAccessToken = await fetchSpotifyToken();
        return searchSpotifyTracks(query);
      }
      if (!response.ok) throw new Error('Spotify search failed');
      const data = await response.json();
      return data.tracks.items;
    } catch(err) {
      showError('Error searching Spotify: ' + err.message);
      return [];
    }
  }

  // Search YouTube videos for query
  async function searchYouTubeVideos(query) {
    if (!YOUTUBE_API_KEY) {
      showError('Please set your YouTube API key in the script.');
      throw new Error('YouTube API key missing');
    }
    try {
      const url = new URL('https://www.googleapis.com/youtube/v3/search');
      url.searchParams.set('part', 'snippet');
      url.searchParams.set('q', query);
      url.searchParams.set('type', 'video');
      url.searchParams.set('maxResults', '5');
      url.searchParams.set('key', YOUTUBE_API_KEY);
      const response = await fetch(url.toString());
      if (!response.ok) throw new Error('YouTube search failed');
      const data = await response.json();
      return data.items;
    } catch (err) {
      showError('Error searching YouTube: ' + err.message);
      return [];
    }
  }

  searchForm.addEventListener('submit', async e => {
    e.preventDefault();
    clearMessages();
    clearPlayer();
    resultsSection.hidden = true;
    playerSection.hidden = true;

    const input = searchInput.value.trim();
    if (!input) {
      showInfo('Please enter a song name or link.');
      return;
    }
    showInfo('Searching...');

    let searchQuery = input;
    if (input.startsWith('https://open.spotify.com/track/')) {
      const trackId = input.split('/track/')[1]?.split('?')[0];
      if (trackId) {
        const track = await getSpotifyTrackById(trackId);
        if (track) {
          playSingleSong(await buildPlayableSong(track));
          hideInfo();
          return;
        } else {
          showInfo('Spotify track not found.');
          return;
        }
      }
    } else if (
      input.startsWith('https://youtu.be/') ||
      input.includes('youtube.com/watch?v=')
    ) {
      const videoId = extractYouTubeVideoID(input);
      if (videoId) {
        const ytTitle = await getYouTubeVideoTitle(videoId);
        if (!ytTitle) {
          showInfo('YouTube video not found.');
          return;
        }
        const spotifyTracks = await searchSpotifyTracks(ytTitle);
        let songMeta = null;
        if (spotifyTracks.length > 0) {
          songMeta = await buildPlayableSong(spotifyTracks[0]);
        } else {
          songMeta = {
            title: ytTitle,
            artist: 'Unknown Artist',
            poster: '',
            youtubeId: videoId
          };
        }
        playSingleSong(songMeta);
        hideInfo();
        return;
      }
    }

    const spotifyTracks = await searchSpotifyTracks(searchQuery);
    if (spotifyTracks.length === 0) {
      showInfo('No songs found for "' + searchQuery + '". Please try another query.');
      resultsSection.innerHTML = `<p>No songs found for "${escapeHtml(searchQuery)}". Please try another query.</p>`;
      resultsSection.hidden = false;
      return;
    }

    if (searchMode === 'accuracy') {
      const song = await buildPlayableSong(spotifyTracks[0]);
      playSingleSong(song);
      hideInfo();
    } else {
      const promises = spotifyTracks.slice(0, 10).map(async track => {
        const q = track.name + ' ' + track.artists[0].name + ' audio';
        const ytVideos = await searchYouTubeVideos(q);
        const ytVideoId = ytVideos.length > 0 ? ytVideos[0].id.videoId : null;
        return buildPlayableSong(track, ytVideoId);
      });
      const songs = await Promise.all(promises);
      showSongList(songs);
      hideInfo();
    }
  });

  function extractYouTubeVideoID(url) {
    const ytRegex = /(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
    const match = url.match(ytRegex);
    return match ? match[1] : null;
  }

  async function getSpotifyTrackById(trackId) {
    if (!spotifyAccessToken) spotifyAccessToken = await fetchSpotifyToken();
    try {
      const response = await fetch(`https://api.spotify.com/v1/tracks/${trackId}`, {
        headers: { Authorization: `Bearer ${spotifyAccessToken}` }
      });
      if (response.status === 401) {
        spotifyAccessToken = await fetchSpotifyToken();
        return getSpotifyTrackById(trackId);
      }
      if (!response.ok) throw new Error('Spotify track not found');
      return await response.json();
    } catch (err) {
      showError('Error fetching Spotify track: ' + err.message);
      return null;
    }
  }

  async function getYouTubeVideoTitle(videoId) {
    if (!YOUTUBE_API_KEY) return null;
    try {
      const url = new URL('https://www.googleapis.com/youtube/v3/videos');
      url.searchParams.set('part', 'snippet');
      url.searchParams.set('id', videoId);
      url.searchParams.set('key', YOUTUBE_API_KEY);
      const response = await fetch(url.toString());
      if (!response.ok) throw new Error('YouTube get video failed');
      const data = await response.json();
      if (data.items && data.items.length > 0) {
        return data.items[0].snippet.title;
      }
      return null;
    } catch {
      return null;
    }
  }

  async function buildPlayableSong(track, youtubeId = null) {
    const song = {
      title: track.name,
      artist: track.artists.map(a => a.name).join(', '),
      poster: track.album.images[0]?.url || '',
      spotifyUrl: track.external_urls?.spotify || '',
      youtubeId: youtubeId
    };
    if (!youtubeId) {
      const q = `${song.title} ${song.artist} audio`;
      const ytVideos = await searchYouTubeVideos(q);
      song.youtubeId = ytVideos.length > 0 ? ytVideos[0].id.videoId : null;
    }
    return song;
  }

  function playSingleSong(song) {
    currentSong = song;
    resultsSection.hidden = true;
    playerSection.hidden = false;
    playerPoster.src = song.poster || '';
    playerPoster.alt = `Poster for ${song.title} by ${song.artist}`;
    playerTitle.textContent = song.title || 'Unknown Title';
    playerArtist.textContent = song.artist || 'Unknown Artist';
    if (song.youtubeId) {
      youtubePlayer.src = `https://www.youtube.com/embed/${song.youtubeId}?autoplay=1&controls=1&rel=0`;
      downloadButton.href = `https://www.youtube.com/watch?v=${song.youtubeId}`;
      downloadButton.setAttribute('aria-label', `Download ${song.title} by ${song.artist}`);
      downloadButton.style.pointerEvents = 'auto';
      downloadButton.querySelector('button').disabled = false;
      downloadButton.querySelector('button').textContent = 'Download Song';
    } else {
      youtubePlayer.src = '';
      downloadButton.href = '#';
      downloadButton.setAttribute('aria-label', '');
      downloadButton.style.pointerEvents = 'none';
      downloadButton.querySelector('button').disabled = true;
      downloadButton.querySelector('button').textContent = 'Download unavailable';
    }
    window.scrollTo({top: playerSection.offsetTop - 20, behavior: 'smooth'});
  }

  function showSongList(songs) {
    resultsSection.innerHTML = '';
    resultsSection.hidden = false;
    playerSection.hidden = true;
    if (songs.length === 0) {
      resultsSection.innerHTML = `<p>No songs found.</p>`;
      return;
    }
    const container = document.createElement('div');
    container.className = 'song-list';
    songs.forEach((song) => {
      const card = document.createElement('article');
      card.className = 'song-card';
      card.tabIndex = 0;
      card.setAttribute('role', 'button');
      card.ariaLabel = `${song.title} by ${song.artist}, click to play`;
      card.innerHTML = `
        <img src="${song.poster}" alt="Poster of ${escapeHtml(song.title)} by ${escapeHtml(song.artist)}" class="song-poster"/>
        <h3 class="song-title">${escapeHtml(song.title)}</h3>
        <p class="song-artist">${escapeHtml(song.artist)}</p>
      `;
      card.addEventListener('click', () => {
        playSingleSong(song);
      });
      card.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          card.click();
        }
      });
      container.appendChild(card);
    });
    resultsSection.appendChild(container);
  }

  function showInfo(msg) {
    infoMessage.textContent = msg;
    infoMessage.hidden = false;
  }
  
  function hideInfo() {
    infoMessage.hidden = true;
  }

  function showError(msg) {
    infoMessage.textContent = 'Error: ' + msg;
    infoMessage.hidden = false;
  }

  function clearMessages() {
    infoMessage.textContent = '';
    infoMessage.hidden = true;
    resultsSection.innerHTML = '';
  }

  function clearPlayer() {
    playerPoster.src = '';
    playerTitle.textContent = '';
    playerArtist.textContent = '';
    youtubePlayer.src = '';
    downloadButton.href = '#';
    downloadButton.style.pointerEvents = 'none';
    downloadButton.querySelector('button').disabled = true;
    downloadButton.querySelector('button').textContent = 'Download Song';
    playerSection.hidden = true;
  }

  function escapeHtml(text) {
    const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#039;'
  };
  return text.replace(/[&<>"']/g, m => map[m]);
  }
</script>
</body>
</html>
